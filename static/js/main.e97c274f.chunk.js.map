{"version":3,"sources":["store/authActions.js","components/NavBar/NavBar.js","components/Spinner/Spinner.js","components/Todo/Todo.js","components/Main/Main.js","components/Auth/Auth.js","App.js","serviceWorker.js","store/authReducer.js","index.js"],"names":["setUserId","userId","type","setToken","token","logout","localStorage","removeItem","checkAuth","dispatch","expirationTime","getItem","expirationDate","Date","getTime","setTimeout","connect","state","authenticated","setToLogin","value","props","itemsToBeDisplayed","className","onClick","to","style","color","spinner","todo","textDecorationLine","done","textDecorationColor","textDecorationThickness","aim","description","setDone","delete","useState","setTodo","todos","setTodos","fetchingTodos","setFetchingTodos","useEffect","queryParams","axios","get","then","response","transformedTodos","data","transformedTodo","id","push","catch","error","handleInput","event","element","target","itemToBeDisplayed","component","map","classNames","timeout","key","prevState","filter","updatedTodo","patch","Fragment","onChange","placeholder","height","post","concat","name","width","toLogin","actions","setAuthenticated","email","password","passwordWrong","emailWrong","userData","setUserData","errorMsg","setErrorMsg","setCredentials","expiresIn","setItem","onSubmit","preventDefault","trim","test","url","returnSecureToken","localId","idToken","authenticate","backgroundColor","login","auth","setAuth","path","Auth","exact","Main","Boolean","window","location","hostname","match","initialState","authReducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e97c274f.chunk.js","sourcesContent":["export const setAuthenticated = () => {\r\n    return {\r\n        type: \"set_authenticated\",\r\n    };\r\n};\r\n\r\nexport const setUserId = (userId) => {\r\n    return {\r\n        type: \"set_userId\",\r\n        userId: userId,\r\n    };\r\n};\r\n\r\nexport const setToken = (token) => {\r\n    return {\r\n        type: \"set_token\",\r\n        token: token,\r\n    };\r\n}\r\n\r\nexport const setToLogin = (value) => {\r\n    return {\r\n        type: \"set_toLogin\",\r\n        value: value,\r\n    };\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"userId\");\r\n    localStorage.removeItem(\"expirationDate\");\r\n    return {\r\n        type: \"logout\",\r\n    }\r\n}\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n    return (dispatch) => {\r\n        setTimeout(() => dispatch(logout()), expirationTime * 1000);\r\n    };\r\n};\r\n\r\nexport const checkAuth = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (!token) {\r\n            dispatch(logout());\r\n        } else {\r\n            const userId = localStorage.getItem(\"userId\");\r\n            const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\r\n            if (expirationDate < new Date()) {\r\n                dispatch(logout());\r\n            } else {\r\n                dispatch(setToken(token));\r\n                dispatch(setUserId(userId));\r\n                dispatch(setAuthenticated());\r\n                dispatch(\r\n                    checkAuthTimeout(\r\n                        (expirationDate.getTime() - new Date().getTime()) / 1000\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport \"./NavBar.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {setToLogin, logout} from \"../../store/authActions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction NavBar(props) {\r\n    let itemsToBeDisplayed = null;\r\n\r\n    if(!props.authenticated) {\r\n        itemsToBeDisplayed = (\r\n            <div className={\"Buttons\"}>\r\n                <NavLink className=\"AuthBtn Login\" to={\"/auth\"}\r\n                         onClick={() => props.setToLogin(true)}>Login</NavLink>\r\n                <h4>/</h4>\r\n                <NavLink className=\"AuthBtn SignUp\" to={\"/auth\"}\r\n                         onClick={() => props.setToLogin(false)}>Sign up</NavLink>\r\n            </div>\r\n        );\r\n    } else {\r\n        itemsToBeDisplayed = <button className={\"AuthBtn\"} onClick={props.logout}>Logout</button>\r\n    }\r\n    return (\r\n        <div className=\"NavBar\">\r\n            <h1 style={{color: \"white\"}}>Todo app</h1>\r\n            {itemsToBeDisplayed}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authenticated: state.authenticated,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setToLogin: (value) => dispatch(setToLogin(value)),\r\n        logout: () => dispatch(logout()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst spinner = () => <div className=\"loader\">Loading...</div>;\r\n\r\nexport default spinner;","import React from \"react\";\r\n\r\nimport \"./Todo.css\";\r\n\r\nconst todo = (props) => {\r\n    return (\r\n        <div className=\"Todo\">\r\n            <div>\r\n                <h1 style={{\r\n                    textDecorationLine: props.done ? \"line-through\" : \"none\",\r\n                    textDecorationColor: \"rgb(20, 63, 200)\",\r\n                    textDecorationThickness: 5,\r\n                }}>{props.todo.aim}</h1>\r\n            </div>\r\n            <p style={{\r\n                textDecorationColor: \"rgb(20, 63, 200)\",\r\n                textDecorationLine: props.done ? \"line-through\" : \"none\",\r\n                textDecorationThickness: 3,\r\n            }}>{props.todo.description}</p>\r\n            <div>\r\n                <button onClick={props.setDone} style={{color: \"green\"}}>Done!</button>\r\n                <button onClick={props.delete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default todo;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport TransitionGroup from \"react-transition-group/cjs/TransitionGroup\";\r\nimport CSSTransition from \"react-transition-group/cjs/CSSTransition\";\r\nimport Todo from \"../Todo/Todo\";\r\nimport \"./Main.css\";\r\nimport {connect} from \"react-redux\";\r\nimport {checkAuth} from \"../../store/authActions\";\r\n\r\nfunction Main(props) {\r\n    const [todo, setTodo] = useState({\r\n        aim: \"\",\r\n        description: \"\",\r\n        done: false,\r\n    });\r\n    const {authenticated, checkAuth, token, userId} = props;\r\n    const [todos, setTodos] = useState([]);\r\n    const [fetchingTodos, setFetchingTodos] = useState(true);\r\n\r\n    useEffect(() => {\r\n        checkAuth();\r\n        if (authenticated) {\r\n            if(userId && token) {\r\n                const queryParams = \"auth=\" + token + \"&orderBy=\" + '\"userId\"' + '&equalTo=\"' + userId + '\"';\r\n                axios.get(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos.json?\" + queryParams).then(response => {\r\n                    const transformedTodos = [];\r\n                    for (const todo in response.data) {\r\n                        const transformedTodo = {\r\n                            id: todo,\r\n                            ...response.data[todo],\r\n                        }\r\n                        transformedTodos.push(transformedTodo);\r\n                    }\r\n                    setTodos(transformedTodos);\r\n                    setFetchingTodos(false);\r\n                }).catch(error => {\r\n                });\r\n            }\r\n        }\r\n    }, [authenticated, checkAuth, token, userId]);\r\n\r\n    const handleInput = (event, element) => {\r\n        setTodo({\r\n                ...todo,\r\n                [element]: event.target.value,\r\n            }\r\n        )\r\n    };\r\n\r\n    const clearTodo = () => {\r\n        setTodo({\r\n            aim: \"\",\r\n            description: \"\",\r\n            done: false,\r\n        });\r\n    }\r\n\r\n    const addTodo = () => {\r\n        if (!todo.aim || !todo.description) {\r\n            return;\r\n        }\r\n        axios.post(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos.json\", {\r\n            ...todo,\r\n            userId: props.userId,\r\n        }).then(response => {\r\n            setTodos(prevState => prevState.concat({\r\n                id: response.data.name,\r\n                aim: todo.aim,\r\n                description: todo.description,\r\n                done: false,\r\n            }));\r\n        }).catch(error => {\r\n        });\r\n        clearTodo();\r\n    }\r\n\r\n    const deleteTodo = (id) => {\r\n        setTodos(prevState => prevState.map(todo => todo.id !== id ? todo : {\r\n            ...todo,\r\n            aim: \"Deleting\"\r\n        }));\r\n        axios.delete(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos/\" + id + \".json\").then(response => {\r\n            setTodos(prevState => prevState.filter(todo => todo.id !== id));\r\n        }).catch();\r\n    }\r\n\r\n    const setDone = (id) => {\r\n        let updatedTodo = {};\r\n        setTodos(todos.map(todo => {\r\n            if (todo.id === id) {\r\n                updatedTodo = {...todo, done: true};\r\n                return updatedTodo;\r\n            }\r\n            return todo;\r\n        }));\r\n        axios\r\n            .patch(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos/\" + id + \".json\",\r\n                {\r\n                    aim: updatedTodo.aim,\r\n                    description: updatedTodo.description,\r\n                    done: updatedTodo.done\r\n                })\r\n            .then();\r\n    }\r\n\r\n    let itemToBeDisplayed = null;\r\n\r\n    if (authenticated) {\r\n        if (fetchingTodos) {\r\n            itemToBeDisplayed = <Spinner/>;\r\n        } else {\r\n            itemToBeDisplayed = (\r\n                <TransitionGroup component=\"div\" className=\"Todos\">\r\n                    {todos.map(todo =>\r\n                        <CSSTransition classNames=\"fade\" timeout={300}\r\n                                       key={todo.id}>\r\n                            <Todo key={todo.id}\r\n                                  todo={todo}\r\n                                  done={todo.done}\r\n                                  delete={() => deleteTodo(todo.id)}\r\n                                  setDone={() => setDone(todo.id)}/>\r\n                        </CSSTransition>\r\n                    )}\r\n                </TransitionGroup>\r\n            );\r\n        }\r\n    } else {\r\n        itemToBeDisplayed = (\r\n            <h1 style={{color: \"orange\"}}>You should login/sign up in order\r\n                to make todos!</h1>\r\n        );\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <h1 style={{color: \"white\"}}>Your Todos</h1>\r\n            <div className=\"SetTodo\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(event) => handleInput(event, \"aim\")}\r\n                    placeholder=\"Your Aim\"\r\n                    value={todo.aim}\r\n                />\r\n                <textarea\r\n                    type=\"text\"\r\n                    onChange={(event) => handleInput(event, \"description\")}\r\n                    placeholder=\"Description\"\r\n                    value={todo.description}\r\n                    style={{height: 150}}\r\n                />\r\n                <button onClick={addTodo}>Add TODO</button>\r\n            </div>\r\n            <hr width={\"95%\"}/>\r\n            {itemToBeDisplayed}\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authenticated: state.authenticated,\r\n        token: state.token,\r\n        userId: state.userId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        checkAuth: () => dispatch(checkAuth()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React, {useState} from \"react\";\r\n\r\nimport \"./Auth.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport * as actions from \"../../store/authActions\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nfunction Auth(props) {\r\n\r\n    const [userData, setUserData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordWrong: null,\r\n        emailWrong: null,\r\n    });\r\n\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n    const handleInput = (event, element) => {\r\n        setUserData({\r\n                ...userData,\r\n                [element]: event.target.value,\r\n                [element + \"Wrong\"]: false,\r\n            }\r\n        );\r\n    };\r\n\r\n    const isValid = (element, regex) => {\r\n        return regex.test(element);\r\n    }\r\n\r\n    const authenticate = (event) => {\r\n        event.preventDefault();\r\n        const email = userData.email.trim();\r\n        const password = userData.password.trim();\r\n        if (/.+.[a-z]+\\.[a-z]{2,3}/.test(email) && /.{6,}/.test(password)) {\r\n            const url = props.toLogin\r\n                ? \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDtXkNYeovl9gqg1Fcv2M3AEwfj8Z22ZvA\"\r\n                : \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDtXkNYeovl9gqg1Fcv2M3AEwfj8Z22ZvA\";\r\n            axios.post(url, {\r\n                email: email,\r\n                password: password,\r\n                returnSecureToken: true\r\n            }).then(response => {\r\n                setCredentials(response.data.localId, response.data.idToken, response.data.expiresIn);\r\n            }).catch(error => setErrorMsg(props.toLogin ? \"Invalid credentials!\" : \"User already exists!\"));\r\n        } else {\r\n            if (!/.+.[a-z]+\\.[a-z]{2,3}/.test(email)) {\r\n                setUserData(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        emailWrong: true\r\n                    }\r\n                });\r\n            }\r\n            if (!isValid(password, /.{6,}/)) {\r\n                setUserData(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        passwordWrong: true\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const setCredentials = (userId, token, expiresIn) => {\r\n        props.setUserId(userId);\r\n        props.setAuthenticated();\r\n        props.setToken(token);\r\n\r\n\r\n        localStorage.setItem(\"userId\", userId);\r\n        localStorage.setItem(\"token\", token);\r\n\r\n        const expirationDate = new Date(\r\n            new Date().getTime() + expiresIn * 1000\r\n        );\r\n        localStorage.setItem(\"expirationDate\", expirationDate);\r\n    }\r\n\r\n    return (\r\n        <div className={\"Auth\"}>\r\n            {props.authenticated ? <Redirect to={\"/\"} /> : null}\r\n            <h1 style={{color: \"white\"}}>{props.toLogin ? \"Login\" : \"Sign Up\"}</h1>\r\n            {errorMsg ? <p style={{color: \"salmon\"}}>{errorMsg}</p> : null}\r\n            <form onSubmit={(event) => authenticate(event)}\r\n                  className={\"AuthForm\"}>\r\n                <input type=\"text\" value={userData.email}\r\n                       onChange={(event) => handleInput(event, \"email\")}\r\n                       placeholder={\"email\"}\r\n                       style={{backgroundColor: userData.emailWrong ? \"salmon\" : null}}/>\r\n                <input type=\"password\" value={userData.password}\r\n                       onChange={(event) => handleInput(event, \"password\")}\r\n                       placeholder={\"password\"}\r\n                       style={{backgroundColor: userData.passwordWrong ? \"salmon\" : null}}/>\r\n                <input type={\"submit\"}\r\n                       value={props.toLogin ? \"Login\" : \"Sign Up\"}\r\n                       className={\"auth-btn\"}/>\r\n            </form>\r\n            <Link to={\"/\"} style={{color: \"white\"}}>Back Home!</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        toLogin: state.toLogin,\r\n        authenticated: state.authenticated,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setToken: (token) => dispatch(actions.setToken(token)),\r\n        setUserId: (userId) => dispatch(actions.setUserId(userId)),\r\n        setAuthenticated: () => dispatch(actions.setAuthenticated()),\r\n        logout: () => dispatch(actions.logout()),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React, {useState, useEffect} from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\n\r\nimport Main from \"./components/Main/Main\";\r\nimport {Route, Switch, Redirect} from \"react-router\";\r\nimport Auth from \"./components/Auth/Auth\";\r\nimport {checkAuth} from \"./store/authActions\";\r\nimport {connect} from \"react-redux\"\r\n\r\nfunction App(props) {\r\n\r\n    const [auth, setAuth] = useState({\r\n        authenticated: true,\r\n        userId: null,\r\n        login: false,\r\n    });\r\n\r\n    const {checkAuth} = props;\r\n\r\n    useEffect(() => {\r\n        checkAuth();\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar auth={auth} setAuth={setAuth}/>\r\n            <Switch>\r\n                <Route path=\"/auth\" component={Auth} />\r\n                <Route exact path=\"/\" component={Main} />\r\n                <Redirect to={\"/\"}/>\r\n            </Switch>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch  => {\r\n    return {\r\n        checkAuth: () => dispatch(checkAuth()),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n    authenticated: false,\r\n    userId: null,\r\n    token: null,\r\n    toLogin: false,\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"set_authenticated\": return {\r\n            ...state,\r\n            authenticated: true,\r\n        };\r\n        case \"set_token\": return {\r\n            ...state,\r\n            token: action.token,\r\n        };\r\n        case \"set_userId\": return {\r\n            ...state,\r\n            userId: action.userId,\r\n        };\r\n        case \"set_toLogin\": return {\r\n            ...state,\r\n            toLogin: action.value,\r\n        };\r\n        case \"logout\": return initialState;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore, compose, applyMiddleware,} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport authReducer from \"./store/authReducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(authReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter basename=\"todo-app\">\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}