{"version":3,"sources":["App.module.css","Todo/Todo.module.css","Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","todo","props","console","log","className","styles","Todo","aim","description","onClick","delete","App","todoItems","useState","todos","todoList","setTodoList","text","setAim","setDescription","message","warning","setWarning","length","Todos","map","key","tempArray","index","findIndex","item","splice","deleteHandler","style","color","textDecoration","SetTodo","type","onChange","event","target","value","aimHandler","placeholder","descriptionHandler","temp","push","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,qBAAqB,MAAQ,qB,mBCAhFD,EAAOC,QAAU,CAAC,KAAO,qB,qKCiBVC,EAdF,SAACC,GAEV,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAWC,IAAOC,MACnB,6BACI,4BAAKL,EAAMM,MAEf,2BAAIN,EAAMO,aACV,6BACI,4BAAQC,QAASR,EAAMS,QAAvB,a,gBCgHDC,MAvHf,WACI,IAAIC,EAAY,KADL,EAQqBC,mBAAS,CACrCC,MAAO,KATA,mBAQJC,EARI,KAQMC,EARN,OAYWH,mBAAS,CAC3BI,KAAM,KAbC,mBAYJV,EAZI,KAYCW,EAZD,OAgB2BL,mBAAS,CAC3CI,KAAM,KAjBC,mBAgBJT,EAhBI,KAgBSW,EAhBT,OAoBmBN,mBAAS,CACnCO,QAAS,OArBF,mBAoBJC,EApBI,KAoBKC,EApBL,KA+FX,OAjBIP,EAASD,MAAMS,OAAS,IACxBX,EACI,yBAAKR,UAAWC,IAAOmB,OAClBT,EAASD,MAAMW,KAAI,SAACzB,EAAM0B,GACvB,OACI,kBAACpB,EAAD,CACIC,IAAKP,EAAKO,IACVC,YAAaR,EAAKQ,YAClBkB,IAAK1B,EAAK0B,IACVhB,OAAQ,SAACgB,GAAD,OAnBV,SAACA,GACrB,IAAMC,EAAS,YAAOZ,EAASD,OACzBc,EAAQD,EAAUE,WAAU,SAAAC,GAAI,OAAIA,EAAKJ,MAAQA,KACvDC,EAAUI,OAAOH,EAAO,GACxBZ,EAAY,CACRF,MAAOa,IAEXzB,QAAQC,IAAI,YAY2B6B,CAAcN,WASnD,yBAAKtB,UAAWC,IAAOM,KACnB,0CACA,wBAAIsB,MA/FM,CACdC,MAAO,SACPC,eAAgB,cA6FWd,EAAQD,SAC/B,yBAAKhB,UAAWC,IAAO+B,SACnB,2BACIC,KAAK,OACLC,SAAU,SAACC,GAAD,OA7EP,SAACA,GAChBjB,EAAW,CACPF,QAAS,OAEbF,EAAO,CACHD,KAAMsB,EAAMC,OAAOC,QAwEUC,CAAWH,IAChCI,YAAY,WACZF,MAAOlC,EAAIU,OAEf,8BACIoB,KAAK,OACLC,SAAU,SAACC,GAAD,OA1EC,SAACA,GACxBjB,EAAW,CACPF,QAAS,OAEbD,EAAe,CACXF,KAAMsB,EAAMC,OAAOC,QAqEUG,CAAmBL,IACxCI,YAAY,cACZF,MAAOjC,EAAYS,OAEvB,4BAAQR,QArEG,WACnB,GAAKF,EAAIU,MAAST,EAAYS,KAA9B,CAMA,IAAM4B,EAAI,YAAO9B,EAASD,OAC1B+B,EAAKC,KAAK,CACNvC,IAAKA,EAAIU,KACTT,YAAaA,EAAYS,KACzBS,IAAKqB,KAAKC,WAEdhC,EAAY,CACRF,MAAO+B,IAEX3B,EAAO,CACHD,KAAM,KAEVE,EAAe,CACXF,KAAM,UAlBNK,EAAW,CACPF,QAAS,yBAkET,aAEHR,IC5GOqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAM9C,c","file":"static/js/main.af4110a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1X1hC\",\"SetTodo\":\"App_SetTodo__3GJYP\",\"Todos\":\"App_Todos__3HjTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Todo\":\"Todo_Todo__3NvM_\"};","import React from \"react\";\r\n\r\nimport styles from \"./Todo.module.css\";\r\n\r\nconst todo = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className={styles.Todo}>\r\n            <div>\r\n                <h1>{props.aim}</h1>\r\n            </div>\r\n            <p>{props.description}</p>\r\n            <div>\r\n                <button onClick={props.delete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default todo;\r\n","import React, { useState } from \"react\";\r\n\r\nimport Todo from \"./Todo/Todo.js\";\r\n\r\nimport styles from \"./App.module.css\";\r\n\r\nfunction App() {\r\n    let todoItems = null;\r\n\r\n    const warnStyle = {\r\n        color: \"salmon\",\r\n        textDecoration: \"underline\",\r\n    };\r\n\r\n    const [todoList, setTodoList] = useState({\r\n        todos: [],\r\n    });\r\n\r\n    const [aim, setAim] = useState({\r\n        text: \"\",\r\n    });\r\n    \r\n    const [description, setDescription] = useState({\r\n        text: \"\",\r\n    });\r\n\r\n    const [warning, setWarning] = useState({\r\n        message: null,\r\n    });\r\n\r\n\r\n    const aimHandler = (event) => {\r\n        setWarning({\r\n            message: null,\r\n        });\r\n        setAim({\r\n            text: event.target.value,\r\n        });\r\n    };\r\n\r\n    const descriptionHandler = (event) => {\r\n        setWarning({\r\n            message: null,\r\n        });\r\n        setDescription({\r\n            text: event.target.value,\r\n        });\r\n    };\r\n\r\n    const addTodoHandler = () => {\r\n        if (!aim.text || !description.text) {\r\n            setWarning({\r\n                message: \"Fill in all fields\",\r\n            });\r\n            return;\r\n        }\r\n        const temp = [...todoList.todos];\r\n        temp.push({\r\n            aim: aim.text,\r\n            description: description.text,\r\n            key: Math.random(),\r\n        });\r\n        setTodoList({\r\n            todos: temp,\r\n        });\r\n        setAim({\r\n            text: \"\",\r\n        });\r\n        setDescription({\r\n            text: \"\",\r\n        });\r\n    };\r\n\r\n\r\n    const deleteHandler = (key) => {\r\n      const tempArray = [...todoList.todos];\r\n      const index = tempArray.findIndex(item => item.key === key)\r\n      tempArray.splice(index, 1);\r\n      setTodoList({\r\n          todos: tempArray,\r\n      });\r\n      console.log(\"Removed!\");\r\n    };\r\n\r\n    if (todoList.todos.length > 0) {\r\n        todoItems = (\r\n            <div className={styles.Todos}>\r\n                {todoList.todos.map((todo, key) => {\r\n                    return (\r\n                        <Todo\r\n                            aim={todo.aim}\r\n                            description={todo.description}\r\n                            key={todo.key}\r\n                            delete={(key) => deleteHandler(key)}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={styles.App}>\r\n            <h1>Your Todos</h1>\r\n            <h3 style={warnStyle}>{warning.message}</h3>\r\n            <div className={styles.SetTodo}>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(event) => aimHandler(event)}\r\n                    placeholder=\"Your Aim\"\r\n                    value={aim.text}\r\n                />\r\n                <textarea\r\n                    type=\"text\"\r\n                    onChange={(event) => descriptionHandler(event)}\r\n                    placeholder=\"Description\"\r\n                    value={description.text}\r\n                />\r\n                <button onClick={addTodoHandler}>Add TODO</button>\r\n            </div>\r\n            {todoItems}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}