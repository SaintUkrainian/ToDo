{"version":3,"sources":["store/authReducer.js","components/NavBar/NavBar.js","components/Spinner/Spinner.js","components/Todo/Todo.js","components/Main/Main.js","components/Auth/Auth.js","App.js","serviceWorker.js","store/authStore.js","index.js"],"names":["setUserId","userId","type","setToken","token","logout","localStorage","removeItem","connect","state","authenticated","dispatch","setToLogin","value","props","itemsToBeDisplayed","className","onClick","to","style","color","spinner","todo","textDecorationLine","done","textDecorationColor","textDecorationThickness","aim","description","setDone","delete","checkAuth","getItem","Date","useState","setTodo","todos","setTodos","fetchingTodos","setFetchingTodos","useEffect","queryParams","axios","get","then","response","transformedTodos","data","transformedTodo","id","push","catch","error","handleInput","event","element","target","itemToBeDisplayed","component","map","classNames","timeout","key","prevState","filter","updatedTodo","patch","Fragment","onChange","placeholder","height","post","concat","name","toLogin","actions","setAuthenticated","email","password","passwordWrong","emailWrong","userData","setUserData","errorMsg","setErrorMsg","setCredentials","expiresIn","setItem","onSubmit","preventDefault","trim","test","url","returnSecureToken","localId","idToken","authenticate","backgroundColor","App","login","auth","setAuth","path","Auth","exact","Main","Boolean","window","location","hostname","match","initialState","authStore","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b8553269.chunk.js","sourcesContent":["export const setAuthenticated = () => {\r\n    return {\r\n        type: \"set_authenticated\",\r\n    };\r\n};\r\n\r\nexport const setUserId = (userId) => {\r\n    return {\r\n        type: \"set_userId\",\r\n        userId: userId,\r\n    };\r\n};\r\n\r\nexport const setToken = (token) => {\r\n    return {\r\n        type: \"set_token\",\r\n        token: token,\r\n    };\r\n}\r\n\r\nexport const setToLogin = (value) => {\r\n    return {\r\n        type: \"set_toLogin\",\r\n        value: value,\r\n    };\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"userId\");\r\n    return {\r\n        type: \"logout\",\r\n    }\r\n}\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n    return (dispatch) => {\r\n        setTimeout(() => dispatch(logout()), expirationTime * 1000);\r\n    };\r\n};\r\n\r\nexport const checkAuth = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (!token) {\r\n            dispatch(logout());\r\n        } else {\r\n            const userId = localStorage.getItem(\"userId\");\r\n            const expirationDate = new Date(\r\n                localStorage.getItem(\"expirationDate\")\r\n            );\r\n            if (expirationDate < new Date()) {\r\n                dispatch(logout());\r\n            } else {\r\n                dispatch(setToken(token));\r\n                dispatch(setUserId(userId));\r\n                dispatch(setAuthenticated());\r\n                // dispatch(\r\n                //     checkAuthTimeout(\r\n                //         (expirationDate.getTime() - new Date().getTime()) / 1000\r\n                //     )\r\n                // );\r\n            }\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport \"./NavBar.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {setToLogin, logout} from \"../../store/authReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction NavBar(props) {\r\n    let itemsToBeDisplayed = null;\r\n\r\n    if(!props.authenticated) {\r\n        itemsToBeDisplayed = (\r\n            <div className={\"Buttons\"}>\r\n                <NavLink className=\"AuthBtn Login\" to={\"/auth\"}\r\n                         onClick={() => props.setToLogin(true)}>Login</NavLink>\r\n                <h4>/</h4>\r\n                <NavLink className=\"AuthBtn SignUp\" to={\"/auth\"}\r\n                         onClick={() => props.setToLogin(false)}>Sign up</NavLink>\r\n            </div>\r\n        );\r\n    } else {\r\n        itemsToBeDisplayed = <button className={\"AuthBtn\"} onClick={props.logout}>Logout</button>\r\n    }\r\n    return (\r\n        <div className=\"NavBar\">\r\n            <h1 style={{color: \"white\"}}>Todo app</h1>\r\n            {itemsToBeDisplayed}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authenticated: state.authenticated,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setToLogin: (value) => dispatch(setToLogin(value)),\r\n        logout: () => dispatch(logout()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst spinner = () => <div className=\"loader\">Loading...</div>;\r\n\r\nexport default spinner;","import React from \"react\";\r\n\r\nimport \"./Todo.css\";\r\n\r\nconst todo = (props) => {\r\n    return (\r\n        <div className=\"Todo\">\r\n            <div>\r\n                <h1 style={{\r\n                    textDecorationLine: props.done ? \"line-through\" : \"none\",\r\n                    textDecorationColor: \"rgb(20, 63, 200)\",\r\n                    textDecorationThickness: 5,\r\n                }}>{props.todo.aim}</h1>\r\n            </div>\r\n            <p style={{\r\n                textDecorationColor: \"rgb(20, 63, 200)\",\r\n                textDecorationLine: props.done ? \"line-through\" : \"none\",\r\n                textDecorationThickness: 3,\r\n            }}>{props.todo.description}</p>\r\n            <div>\r\n                <button onClick={props.setDone} style={{color: \"green\"}}>Done!</button>\r\n                <button onClick={props.delete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default todo;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport TransitionGroup from \"react-transition-group/cjs/TransitionGroup\";\r\nimport CSSTransition from \"react-transition-group/cjs/CSSTransition\";\r\nimport Todo from \"../Todo/Todo\";\r\nimport \"./Main.css\";\r\nimport {connect} from \"react-redux\";\r\nimport {checkAuth} from \"../../store/authReducer\";\r\n\r\nfunction Main(props) {\r\n    const [todo, setTodo] = useState({\r\n        aim: \"\",\r\n        description: \"\",\r\n        done: false,\r\n    });\r\n    const {authenticated, checkAuth, token, userId} = props;\r\n    const [todos, setTodos] = useState([]);\r\n    const [fetchingTodos, setFetchingTodos] = useState(true);\r\n\r\n    useEffect(() => {\r\n        checkAuth();\r\n        if (authenticated) {\r\n            if(userId && token) {\r\n                const queryParams = \"auth=\" + token + \"&orderBy=\" + '\"userId\"' + '&equalTo=\"' + userId + '\"';\r\n                axios.get(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos.json?\" + queryParams).then(response => {\r\n                    const transformedTodos = [];\r\n                    for (const todo in response.data) {\r\n                        const transformedTodo = {\r\n                            id: todo,\r\n                            ...response.data[todo],\r\n                        }\r\n                        transformedTodos.push(transformedTodo);\r\n                    }\r\n                    setTodos(transformedTodos);\r\n                    setFetchingTodos(false);\r\n                }).catch(error => {\r\n                });\r\n            }\r\n        }\r\n    }, [authenticated, checkAuth, token, userId]);\r\n\r\n    const handleInput = (event, element) => {\r\n        setTodo({\r\n                ...todo,\r\n                [element]: event.target.value,\r\n            }\r\n        )\r\n    };\r\n\r\n    const clearTodo = () => {\r\n        setTodo({\r\n            aim: \"\",\r\n            description: \"\",\r\n            done: false,\r\n        });\r\n    }\r\n\r\n    const addTodo = () => {\r\n        if (!todo.aim || !todo.description) {\r\n            return;\r\n        }\r\n        axios.post(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos.json\", {\r\n            ...todo,\r\n            userId: props.userId,\r\n        }).then(response => {\r\n            setTodos(prevState => prevState.concat({\r\n                id: response.data.name,\r\n                aim: todo.aim,\r\n                description: todo.description,\r\n                done: false,\r\n            }));\r\n        }).catch(error => {\r\n        });\r\n        clearTodo();\r\n    }\r\n\r\n    const deleteTodo = (id) => {\r\n        setTodos(prevState => prevState.map(todo => todo.id !== id ? todo : {\r\n            ...todo,\r\n            aim: \"Deleting\"\r\n        }));\r\n        axios.delete(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos/\" + id + \".json\").then(response => {\r\n            setTodos(prevState => prevState.filter(todo => todo.id !== id));\r\n        }).catch();\r\n    }\r\n\r\n    const setDone = (id) => {\r\n        let updatedTodo = {};\r\n        setTodos(todos.map(todo => {\r\n            if (todo.id === id) {\r\n                updatedTodo = {...todo, done: true};\r\n                return updatedTodo;\r\n            }\r\n            return todo;\r\n        }));\r\n        axios\r\n            .patch(\"https://todoapp-85a8f-default-rtdb.europe-west1.firebasedatabase.app/todos/\" + id + \".json\",\r\n                {\r\n                    aim: updatedTodo.aim,\r\n                    description: updatedTodo.description,\r\n                    done: updatedTodo.done\r\n                })\r\n            .then();\r\n    }\r\n\r\n    let itemToBeDisplayed = null;\r\n\r\n    if (authenticated) {\r\n        if (fetchingTodos) {\r\n            itemToBeDisplayed = <Spinner/>;\r\n        } else {\r\n            itemToBeDisplayed = (\r\n                <TransitionGroup component=\"div\" className=\"Todos\">\r\n                    {todos.map(todo =>\r\n                        <CSSTransition classNames=\"fade\" timeout={300}\r\n                                       key={todo.id}>\r\n                            <Todo key={todo.id}\r\n                                  todo={todo}\r\n                                  done={todo.done}\r\n                                  delete={() => deleteTodo(todo.id)}\r\n                                  setDone={() => setDone(todo.id)}/>\r\n                        </CSSTransition>\r\n                    )}\r\n                </TransitionGroup>\r\n            );\r\n        }\r\n    } else {\r\n        itemToBeDisplayed = (\r\n            <h1 style={{color: \"orange\"}}>You should login/sign up in order\r\n                to make todos!</h1>\r\n        );\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <h1 style={{color: \"white\"}}>Your Todos</h1>\r\n            <div className=\"SetTodo\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(event) => handleInput(event, \"aim\")}\r\n                    placeholder=\"Your Aim\"\r\n                    value={todo.aim}\r\n                />\r\n                <textarea\r\n                    type=\"text\"\r\n                    onChange={(event) => handleInput(event, \"description\")}\r\n                    placeholder=\"Description\"\r\n                    value={todo.description}\r\n                    style={{height: 150}}\r\n                />\r\n                <button onClick={addTodo}>Add TODO</button>\r\n            </div>\r\n            {itemToBeDisplayed}\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authenticated: state.authenticated,\r\n        token: state.token,\r\n        userId: state.userId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        checkAuth: () => dispatch(checkAuth()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React, {useState} from \"react\";\r\n\r\nimport \"./Auth.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport * as actions from \"../../store/authReducer\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nfunction Auth(props) {\r\n\r\n    const [userData, setUserData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordWrong: null,\r\n        emailWrong: null,\r\n    });\r\n\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n    const handleInput = (event, element) => {\r\n        setUserData({\r\n                ...userData,\r\n                [element]: event.target.value,\r\n                [element + \"Wrong\"]: false,\r\n            }\r\n        );\r\n    };\r\n\r\n    const isValid = (element, regex) => {\r\n        return regex.test(element);\r\n    }\r\n\r\n    const authenticate = (event) => {\r\n        event.preventDefault();\r\n        const email = userData.email.trim();\r\n        const password = userData.password.trim();\r\n        if (/.+.[a-z]+\\.[a-z]{2,3}/.test(email) && /.{6,}/.test(password)) {\r\n            const url = props.toLogin\r\n                ? \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDtXkNYeovl9gqg1Fcv2M3AEwfj8Z22ZvA\"\r\n                : \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDtXkNYeovl9gqg1Fcv2M3AEwfj8Z22ZvA\";\r\n            axios.post(url, {\r\n                email: email,\r\n                password: password,\r\n                returnSecureToken: true\r\n            }).then(response => {\r\n                setCredentials(response.data.localId, response.data.idToken, response.data.expiresIn);\r\n            }).catch(error => setErrorMsg(props.toLogin ? \"Invalid credentials!\" : \"User already exists!\"));\r\n        } else {\r\n            if (!/.+.[a-z]+\\.[a-z]{2,3}/.test(email)) {\r\n                setUserData(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        emailWrong: true\r\n                    }\r\n                });\r\n            }\r\n            if (!isValid(password, /.{6,}/)) {\r\n                setUserData(prevState => {\r\n                    return {\r\n                        ...prevState,\r\n                        passwordWrong: true\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const setCredentials = (userId, token, expiresIn) => {\r\n        props.setUserId(userId);\r\n        props.setAuthenticated();\r\n        props.setToken(token);\r\n\r\n        localStorage.setItem(\"userId\", userId);\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"expirationDate\", expiresIn);\r\n    }\r\n\r\n    return (\r\n        <div className={\"Auth\"}>\r\n            {props.authenticated ? <Redirect to={\"/\"} /> : null}\r\n            <h1 style={{color: \"white\"}}>{props.toLogin ? \"Login\" : \"Sign Up\"}</h1>\r\n            {errorMsg ? <p style={{color: \"salmon\"}}>{errorMsg}</p> : null}\r\n            <form onSubmit={(event) => authenticate(event)}\r\n                  className={\"AuthForm\"}>\r\n                <input type=\"text\" value={userData.email}\r\n                       onChange={(event) => handleInput(event, \"email\")}\r\n                       placeholder={\"email\"}\r\n                       style={{backgroundColor: userData.emailWrong ? \"salmon\" : null}}/>\r\n                <input type=\"password\" value={userData.password}\r\n                       onChange={(event) => handleInput(event, \"password\")}\r\n                       placeholder={\"password\"}\r\n                       style={{backgroundColor: userData.passwordWrong ? \"salmon\" : null}}/>\r\n                <input type={\"submit\"}\r\n                       value={props.toLogin ? \"Login\" : \"Sign Up\"}\r\n                       className={\"auth-btn\"}/>\r\n            </form>\r\n            <Link to={\"/\"} style={{color: \"white\"}}>Back Home!</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        toLogin: state.toLogin,\r\n        authenticated: state.authenticated,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setToken: (token) => dispatch(actions.setToken(token)),\r\n        setUserId: (userId) => dispatch(actions.setUserId(userId)),\r\n        setAuthenticated: () => dispatch(actions.setAuthenticated()),\r\n        logout: () => dispatch(actions.logout()),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React, {useState} from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\n\r\nimport Main from \"./components/Main/Main\";\r\nimport {Route, Switch, Redirect} from \"react-router\";\r\nimport Auth from \"./components/Auth/Auth\";\r\n\r\nfunction App() {\r\n\r\n    const [auth, setAuth] = useState({\r\n        authenticated: true,\r\n        userId: null,\r\n        login: false,\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar auth={auth} setAuth={setAuth}/>\r\n            <Switch>\r\n                <Route path=\"/auth\" component={Auth} />\r\n                <Route exact path=\"/\" component={Main} />\r\n                <Redirect to={\"/\"}/>\r\n            </Switch>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    authenticated: false,\r\n    userId: null,\r\n    token: null,\r\n    toLogin: false,\r\n}\r\n\r\nconst authStore = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"set_authenticated\": return {\r\n            ...state,\r\n            authenticated: true,\r\n        };\r\n        case \"set_token\": return {\r\n            ...state,\r\n            token: action.token,\r\n        };\r\n        case \"set_userId\": return {\r\n            ...state,\r\n            userId: action.userId,\r\n        };\r\n        case \"set_toLogin\": return {\r\n            ...state,\r\n            toLogin: action.value,\r\n        };\r\n        case \"logout\": return initialState;\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default authStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, compose, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport authStore from \"./store/authStore\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(authStore, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n        <Provider store={store}>\n            <BrowserRouter basename=\"todo-app\">\n                <App/>\n            </BrowserRouter>\n        </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}