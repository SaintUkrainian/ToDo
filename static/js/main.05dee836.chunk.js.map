{"version":3,"sources":["Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["todo","props","console","log","className","style","textDecorationLine","done","textDecorationColor","textDecorationThickness","aim","description","onClick","setDone","color","delete","App","useState","setTodo","todos","setTodos","handleInput","event","element","target","value","type","onChange","placeholder","height","prevState","concat","id","Math","random","TransitionGroup","component","map","CSSTransition","classNames","timeout","key","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQA4BeA,G,MAxBF,SAACC,GAEV,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,QACX,6BACI,wBAAIC,MAAO,CACPC,mBAAoBL,EAAMM,KAAO,eAAiB,OAClDC,oBAAqB,mBACrBC,wBAAyB,IACzBR,EAAMD,KAAKU,MAEnB,uBAAGL,MAAO,CACNG,oBAAqB,mBACrBF,mBAAoBL,EAAMM,KAAO,eAAiB,OAClDE,wBAAyB,IACzBR,EAAMD,KAAKW,aACf,6BACI,4BAAQC,QAASX,EAAMY,QAASR,MAAO,CAACS,MAAO,UAA/C,SACA,4BAAQF,QAASX,EAAMc,QAAvB,c,wBCiEDC,MA/Ef,WAAgB,IAAD,EACaC,mBAAS,CAC7BP,IAAK,GACLC,YAAa,KAHN,mBACJX,EADI,KACEkB,EADF,OAMeD,mBAAS,IANxB,mBAMJE,EANI,KAMGC,EANH,KAQLC,EAAc,SAACC,EAAOC,GACxBL,EAAQ,2BACGlB,GADJ,kBAEEuB,EAAUD,EAAME,OAAOC,UAiCpC,OACI,yBAAKrB,UAAU,OACX,wBAAIC,MAAO,CAACS,MAAO,UAAnB,cACA,yBAAKV,UAAU,WACX,2BACIsB,KAAK,OACLC,SAAU,SAACL,GAAD,OAAWD,EAAYC,EAAO,QACxCM,YAAY,WACZH,MAAOzB,EAAKU,MAEhB,8BACIgB,KAAK,OACLC,SAAU,SAACL,GAAD,OAAWD,EAAYC,EAAO,gBACxCM,YAAY,cACZH,MAAOzB,EAAKW,YACZN,MAAO,CAACwB,OAAQ,OAEpB,4BAAQjB,QAtCJ,WACPZ,EAAKU,KAAQV,EAAKW,cAGvBS,GAAS,SAAAU,GAAS,OAAIA,EAAUC,OAAO,CACnCC,GAAIC,KAAKC,SACT3B,MAAM,EACNG,IAAKV,EAAKU,IACVC,YAAaX,EAAKW,iBAdtBO,EAAQ,CACJR,IAAK,GACLC,YAAa,QA0CT,aAEJ,kBAACwB,EAAA,EAAD,CAAiBC,UAAU,MAAMhC,UAAU,SACtCe,EAAMkB,KAAI,SAAArC,GAAI,OACX,kBAACsC,EAAA,EAAD,CAAeC,WAAW,OAAOC,QAAS,IAC3BC,IAAKzC,EAAKgC,IACrB,kBAAC,EAAD,CAAMS,IAAKzC,EAAKgC,GACVhC,KAAMA,EACNO,KAAMP,EAAKO,KACXQ,OAAQ,kBAlCdiB,EAkC+BhC,EAAKgC,QAjCpDZ,EAASD,EAAMuB,QAAO,SAAA1C,GAAI,OAAIA,EAAKgC,KAAOA,MAD3B,IAACA,GAmCMnB,QAAS,kBA/BlBmB,EA+BgChC,EAAKgC,QA9BlDZ,EAASD,EAAMkB,KAAI,SAAArC,GAAI,OAAIA,EAAKgC,KAAOA,EAAZ,2BAAqBhC,GAArB,IAA2BO,MAAM,IAAQP,MADxD,IAACgC,YCpCDW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.05dee836.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Todo.css\";\r\n\r\nconst todo = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"Todo\">\r\n            <div>\r\n                <h1 style={{\r\n                    textDecorationLine: props.done ? \"line-through\" : \"none\",\r\n                    textDecorationColor: \"rgb(20, 63, 200)\",\r\n                    textDecorationThickness: 5,\r\n                }}>{props.todo.aim}</h1>\r\n            </div>\r\n            <p style={{\r\n                textDecorationColor: \"rgb(20, 63, 200)\",\r\n                textDecorationLine: props.done ? \"line-through\" : \"none\",\r\n                textDecorationThickness: 3,\r\n            }}>{props.todo.description}</p>\r\n            <div>\r\n                <button onClick={props.setDone} style={{color: \"green\"}}>Done!</button>\r\n                <button onClick={props.delete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default todo;\r\n","import React, {useState} from \"react\";\r\n\r\nimport Todo from \"./Todo/Todo.js\";\r\nimport \"./App.css\";\r\n\r\nimport TransitionGroup from \"react-transition-group/TransitionGroup\"\r\nimport CSSTransition from \"react-transition-group/CSSTransition\";\r\n\r\nfunction App() {\r\n    const [todo, setTodo] = useState({\r\n        aim: \"\",\r\n        description: \"\",\r\n    });\r\n\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const handleInput = (event, element) => {\r\n        setTodo({\r\n                ...todo,\r\n                [element]: event.target.value,\r\n            }\r\n        )\r\n    };\r\n\r\n    const clearTodo = () => {\r\n        setTodo({\r\n            aim: \"\",\r\n            description: \"\",\r\n        });\r\n    }\r\n\r\n    const addTodo = () => {\r\n        if (!todo.aim || !todo.description) {\r\n            return;\r\n        }\r\n        setTodos(prevState => prevState.concat({\r\n            id: Math.random(),\r\n            done: false,\r\n            aim: todo.aim,\r\n            description: todo.description\r\n        }));\r\n        clearTodo();\r\n    }\r\n\r\n    const deleteTodo = (id) => {\r\n        setTodos(todos.filter(todo => todo.id !== id));\r\n    }\r\n\r\n    const setDone = (id) => {\r\n        setTodos(todos.map(todo => todo.id === id ? {...todo, done: true} : todo));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1 style={{color: \"white\"}}>Your Todos</h1>\r\n            <div className=\"SetTodo\">\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={(event) => handleInput(event, \"aim\")}\r\n                    placeholder=\"Your Aim\"\r\n                    value={todo.aim}\r\n                />\r\n                <textarea\r\n                    type=\"text\"\r\n                    onChange={(event) => handleInput(event, \"description\")}\r\n                    placeholder=\"Description\"\r\n                    value={todo.description}\r\n                    style={{height: 150}}\r\n                />\r\n                <button onClick={addTodo}>Add TODO</button>\r\n            </div>\r\n            <TransitionGroup component=\"div\" className=\"Todos\">\r\n                {todos.map(todo =>\r\n                    <CSSTransition classNames=\"fade\" timeout={300}\r\n                                   key={todo.id}>\r\n                        <Todo key={todo.id}\r\n                              todo={todo}\r\n                              done={todo.done}\r\n                              delete={() => deleteTodo(todo.id)}\r\n                              setDone={() => setDone(todo.id)}/>\r\n                    </CSSTransition>\r\n                )}\r\n            </TransitionGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}